var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"BanlanceCar","ref":false,"files":[{"name":"BanlanceCar.c","type":"source","group":"model","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BanlanceCar.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"BanlanceCar.h\"\r\n#include \"BanlanceCar_private.h\"\r\n\r\n/* GPIOA output mask value definition. */\r\nuint16_t GPIOA_maskWrite;\r\n\r\n/* Block signals (default storage) */\r\nB_BanlanceCar BanlanceCar_B;\r\n\r\n/* Block states (default storage) */\r\nDW_BanlanceCar BanlanceCar_DW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_BanlanceCar BanlanceCar_M_;\r\nRT_MODEL_BanlanceCar *const BanlanceCar_M = &BanlanceCar_M_;\r\n\r\n/* Model step function */\r\nvoid BanlanceCar_step(void)\r\n{\r\n  /* S-Function (GPIO_Write): '<Root>/GPIO_Write' incorporates:\r\n   *  Constant: '<Root>/Constant'\r\n   *  Constant: '<Root>/Constant1'\r\n   */\r\n  {\r\n    /* Set GPIOA output mask value. */\r\n    GPIOA_maskWrite = GPIOA->ODR;\r\n    GPIOA_maskWrite &= 0xFFCF ;\r\n    GPIOA_maskWrite |= (uint16_t)1.0 << 4;\r\n    GPIOA_maskWrite |= (uint16_t)0.0 << 5;\r\n\r\n    /* Write GPIOA input value */\r\n    GPIOA->ODR = (uint16_t)GPIOA_maskWrite;\r\n  }\r\n\r\n  /* DataStoreRead: '<Root>/Data Store Read1' incorporates:\r\n   *  DataStoreWrite: '<Root>/Data Store Write'\r\n   */\r\n  BanlanceCar_B.DataStoreRead1 = BanlanceCar_ConstB.DataTypeConversion;\r\n\r\n  /* Update for S-Function (TIMERS_Config): '<Root>/Timers1' */\r\n  {\r\n    if (BanlanceCar_B.DataStoreRead1 != TIM2_Conf.CH3_duty) {\r\n      TIM2_Conf.CH3_duty = BanlanceCar_B.DataStoreRead1;\r\n      if (BanlanceCar_B.DataStoreRead1 >= 0) {\r\n        /* Channel3 duty cycle is an input port. */\r\n        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,(uint32_t)\r\n                              (BanlanceCar_B.DataStoreRead1 * (&htim2)->\r\n          Instance->ARR / 100));\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Update for S-Function (TIMERS_Config): '<Root>/Timers' */\r\n  {\r\n  }\r\n\r\n  /* End of Update for S-Function (TIMERS_Config): '<Root>/Timers' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid BanlanceCar_initialize(void)\r\n{\r\n  {\r\n    /* user code (Start function Header) */\r\n    {\r\n      /* TIM2 initialization. */\r\n      /* Store TIM2 informations and its handler. */\r\n      G_TIM_Conf[G_TIM_Count] = &TIM2_Conf;\r\n      G_TIM_Handler[G_TIM_Count] = &htim2;\r\n      G_TIM_Count++;\r\n\r\n      /* Store TIM information. */\r\n      TIM2_Conf.TIM_Prescaler = 0;\r\n      TIM2_Conf.TIM_APBClock = 72000000;\r\n      TIM2_Conf.TIM_ARR = 7199 - 1;\r\n      TIM2_Conf.TIM_Clock = 7.2E+7;\r\n      TIM2_Conf.TIM_Freq = 10001.39;\r\n      TIM2_Conf.CH1_duty = 0.0;\r\n      TIM2_Conf.CH2_duty = 0.0;\r\n      TIM2_Conf.CH3_duty = 6.93;\r\n      TIM2_Conf.CH4_duty = 0.0;\r\n      TIM2_Conf.CH1_type = UNKNOWN;\r\n      TIM2_Conf.CH2_type = UNKNOWN;\r\n      TIM2_Conf.CH3_type = OUTPUT_PWM;\r\n      TIM2_Conf.CH4_type = OUTPUT_PWM;\r\n\r\n      /* Interrupt handler default initialization. */\r\n      TIM2_Conf.ItUpFcn = NULL;\r\n      TIM2_Conf.ItTrgFcn = NULL;\r\n      TIM2_Conf.ItComFcn = NULL;\r\n      TIM2_Conf.ItBrkFcn = NULL;\r\n      TIM2_Conf.ItCcFcn = NULL;\r\n\r\n      /* Auto-reload preload enable */\r\n      /*****Bugzilla 63376 *****/\r\n      /*SET_BIT((&htim2)->Instance->CR1,TIM_CR1_ARPE);*/\r\n\r\n      /* Update register value with blockset value. */\r\n      /* Prescaler. */\r\n      __HAL_TIM_SET_PRESCALER(&htim2,TIM2_Conf.TIM_Prescaler);\r\n\r\n      /* Autoreload: ARR. */\r\n      __HAL_TIM_SET_AUTORELOAD(&htim2,7199 - 1);\r\n\r\n      /* Set CH3 Pulse value. */\r\n      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,(uint32_t)(499));\r\n\r\n      /* Set CH4 Pulse value. */\r\n      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,(uint32_t)((7199 - 1)/2));\r\n\r\n      /* Update registers before start operation to come. */\r\n      HAL_TIM_GenerateEvent(&htim2,TIM_EVENTSOURCE_UPDATE);\r\n    }\r\n\r\n    {\r\n      /* TIM9 initialization. */\r\n      /* Store TIM9 informations and its handler. */\r\n      G_TIM_Conf[G_TIM_Count] = &TIM9_Conf;\r\n      G_TIM_Handler[G_TIM_Count] = &htim9;\r\n      G_TIM_Count++;\r\n\r\n      /* Store TIM information. */\r\n      TIM9_Conf.TIM_Prescaler = 7199;\r\n      TIM9_Conf.TIM_APBClock = 72000000;\r\n      TIM9_Conf.TIM_ARR = 10000 - 1;\r\n      TIM9_Conf.TIM_Clock = 10000.0;\r\n      TIM9_Conf.TIM_Freq = 1.0;\r\n      TIM9_Conf.CH1_duty = 0.0;\r\n      TIM9_Conf.CH2_duty = 0.0;\r\n      TIM9_Conf.CH3_duty = 0.0;\r\n      TIM9_Conf.CH4_duty = 0.0;\r\n      TIM9_Conf.CH1_type = UNKNOWN;\r\n      TIM9_Conf.CH2_type = UNKNOWN;\r\n      TIM9_Conf.CH3_type = UNKNOWN;\r\n      TIM9_Conf.CH4_type = UNKNOWN;\r\n\r\n      /* Interrupt handler default initialization. */\r\n      TIM9_Conf.ItUpFcn = NULL;\r\n      TIM9_Conf.ItTrgFcn = NULL;\r\n      TIM9_Conf.ItComFcn = NULL;\r\n      TIM9_Conf.ItBrkFcn = NULL;\r\n      TIM9_Conf.ItCcFcn = NULL;\r\n\r\n      /* Update interrupt function. */\r\n      TIM9_Conf.ItUpFcn = TIM9_ItUpFcn;\r\n\r\n      /* Auto-reload preload enable */\r\n      /*****Bugzilla 63376 *****/\r\n      /*SET_BIT((&htim9)->Instance->CR1,TIM_CR1_ARPE);*/\r\n\r\n      /* Update register value with blockset value. */\r\n      /* Prescaler. */\r\n      __HAL_TIM_SET_PRESCALER(&htim9,TIM9_Conf.TIM_Prescaler);\r\n\r\n      /* Autoreload: ARR. */\r\n      __HAL_TIM_SET_AUTORELOAD(&htim9,10000 - 1);\r\n\r\n      /* Update registers before start operation to come. */\r\n      HAL_TIM_GenerateEvent(&htim9,TIM_EVENTSOURCE_UPDATE);\r\n    }\r\n\r\n    /* user code (Start function Body) */\r\n\r\n    /* USART1 initialization for send. */\r\n    USART1_Tx_Initialization();\r\n\r\n    {\r\n      /* TIM2 Start. */\r\n\r\n      /* Wait for htim2 State READY. */\r\n      while ((&htim2)->State == HAL_TIM_STATE_BUSY) {\r\n      }\r\n\r\n      HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);\r\n\r\n      /* Wait for htim2 State READY. */\r\n      while ((&htim2)->State == HAL_TIM_STATE_BUSY) {\r\n      }\r\n\r\n      HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);\r\n    }\r\n\r\n    {\r\n      /* TIM9 Start. */\r\n      /* Starts the TIM Base generation in interrupt mode. */\r\n      HAL_TIM_Base_Start_IT(&htim9);\r\n\r\n      /* Start interrupt for Update event*/\r\n      HAL_TIM_Base_Start_IT(&htim9);\r\n    }\r\n  }\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar.c\r\n */\r\n"},{"name":"BanlanceCar.h","type":"header","group":"model","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BanlanceCar.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_h_\r\n#define RTW_HEADER_BanlanceCar_h_\r\n#include \"BanlanceCar_USART.h\"\r\n#include \"STM32_Config.h\"\r\n#include \"BanlanceCar_External_Functions.h\"\r\n#include \"BanlanceCar_TIM.h\"\r\n#ifndef BanlanceCar_COMMON_INCLUDES_\r\n#define BanlanceCar_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* BanlanceCar_COMMON_INCLUDES_ */\r\n\r\n#include \"BanlanceCar_types.h\"\r\n\r\n/* GPIOA output mask value declaration. */\r\nextern uint16_t GPIOA_maskWrite;\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T REG_Access2;                  /* '<S1>/REG_Access2' */\r\n  uint32_T Buff;                       /* '<S1>/MATLAB Function' */\r\n  uint16_T USART_Send;                 /* '<S1>/USART_Send' */\r\n  uint16_T NbChar;                     /* '<S1>/MATLAB Function' */\r\n  int16_T DataStoreRead1;              /* '<Root>/Data Store Read1' */\r\n} B_BanlanceCar;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T motob;                        /* '<Root>/Data Store Memory1' */\r\n  real_T acc_yaw;                      /* '<Root>/Data Store Memory10' */\r\n  real_T yaw;                          /* '<Root>/Data Store Memory11' */\r\n  real_T Accel_Z;                      /* '<Root>/Data Store Memory12' */\r\n  real_T Gyro_Z;                       /* '<Root>/Data Store Memory13' */\r\n  real_T Temputure;                    /* '<Root>/Data Store Memory14' */\r\n  real_T BLTarget;                     /* '<Root>/Data Store Memory15' */\r\n  real_T Angle;                        /* '<Root>/Data Store Memory17' */\r\n  real_T EncoderB;                     /* '<Root>/Data Store Memory19' */\r\n  real_T acc_pitch;                    /* '<Root>/Data Store Memory2' */\r\n  real_T Tar_V;                        /* '<Root>/Data Store Memory20' */\r\n  real_T Ang_moto;                     /* '<Root>/Data Store Memory21' */\r\n  real_T Encoder_bias;                 /* '<Root>/Data Store Memory22' */\r\n  real_T Vel_moto;                     /* '<Root>/Data Store Memory23' */\r\n  real_T Turn_moto;                    /* '<Root>/Data Store Memory24' */\r\n  real_T Tar_turn;                     /* '<Root>/Data Store Memory25' */\r\n  real_T MotorA;                       /* '<Root>/Data Store Memory26' */\r\n  real_T MotorB;                       /* '<Root>/Data Store Memory27' */\r\n  real_T pitch;                        /* '<Root>/Data Store Memory3' */\r\n  real_T Accel_X;                      /* '<Root>/Data Store Memory4' */\r\n  real_T Gyro_X;                       /* '<Root>/Data Store Memory5' */\r\n  real_T acc_roll;                     /* '<Root>/Data Store Memory6' */\r\n  real_T roll;                         /* '<Root>/Data Store Memory7' */\r\n  real_T Accel_Y;                      /* '<Root>/Data Store Memory8' */\r\n  real_T Gyro_Y;                       /* '<Root>/Data Store Memory9' */\r\n} DW_BanlanceCar;\r\n\r\n/* Invariant block signals (default storage) */\r\ntypedef struct {\r\n  const real_T Saturation;             /* '<Root>/Saturation' */\r\n  const real_T Gain;                   /* '<Root>/Gain' */\r\n  const int16_T DataTypeConversion;    /* '<Root>/Data Type Conversion' */\r\n} ConstB_BanlanceCar;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_BanlanceCar {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_BanlanceCar BanlanceCar_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_BanlanceCar BanlanceCar_DW;\r\nextern const ConstB_BanlanceCar BanlanceCar_ConstB;/* constant block i/o */\r\n\r\n/* Model entry point functions */\r\nextern void BanlanceCar_initialize(void);\r\nextern void BanlanceCar_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_BanlanceCar *const BanlanceCar_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Data Type Conversion1' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion1' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion2' : Eliminate redundant data type conversion\r\n * Block '<S1>/Data Type Conversion3' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'BanlanceCar'\r\n * '<S1>'   : 'BanlanceCar/Function-Call Subsystem1'\r\n * '<S2>'   : 'BanlanceCar/Function-Call Subsystem1/MATLAB Function'\r\n */\r\n#endif                                 /* RTW_HEADER_BanlanceCar_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar.h\r\n */\r\n"},{"name":"BanlanceCar_private.h","type":"header","group":"model","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BanlanceCar_private.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_private_h_\r\n#define RTW_HEADER_BanlanceCar_private_h_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* RTW_HEADER_BanlanceCar_private_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_private.h\r\n */\r\n"},{"name":"BanlanceCar_types.h","type":"header","group":"model","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BanlanceCar_types.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_types_h_\r\n#define RTW_HEADER_BanlanceCar_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_BanlanceCar RT_MODEL_BanlanceCar;\r\n\r\n#endif                                 /* RTW_HEADER_BanlanceCar_types_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_types.h\r\n */\r\n"},{"name":"BanlanceCar_data.c","type":"source","group":"data","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Data files","code":"/*\r\n * File: BanlanceCar_data.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"BanlanceCar.h\"\r\n#include \"BanlanceCar_private.h\"\r\n\r\n/* Invariant block signals (default storage) */\r\nconst ConstB_BanlanceCar BanlanceCar_ConstB = {\r\n  5000.0,                              /* '<Root>/Saturation' */\r\n  69.5,                                /* '<Root>/Gain' */\r\n  69                                   /* '<Root>/Data Type Conversion' */\r\n};\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_data.c\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] rtwtypes.h\r\n */\r\n"},{"name":"BanlanceCar_External_Functions.h","type":"header","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: BanlanceCar_External_Functions.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_External_Functions_h_\r\n#define RTW_HEADER_BanlanceCar_External_Functions_h_\r\n\r\n/* Generated by STM32_Config.*/\r\n/***** External Imported Functions *****/\r\n#endif                        /* RTW_HEADER_BanlanceCar_External_Functions_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_External_Functions.h\r\n */\r\n"},{"name":"BanlanceCar_TIM.c","type":"source","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: BanlanceCar_TIM.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"BanlanceCar.h\"\r\n#include \"BanlanceCar_TIM.h\"\r\n\r\n/* Number of configured TIMER. */\r\nuint16_t G_TIM_Count = 0;\r\n\r\n/* Array of TIMER information. */\r\nTIM_ConfTypeDef* G_TIM_Conf[5];\r\nTIM_HandleTypeDef* G_TIM_Handler[5];\r\n\r\n/* TIM2 informations. */\r\nTIM_ConfTypeDef TIM2_Conf;\r\n\r\n/* TIM9 informations. */\r\nTIM_ConfTypeDef TIM9_Conf;\r\n\r\n/*******************************************************************************\r\n * Function Name  : TIM_PeriodElapsedCustomCallback\r\n * Description    : Timer callback for update event\r\n * Input          : TIM_HandleTypeDef*   TIM IC handle\r\n *******************************************************************************/\r\nvoid TIM_PeriodElapsedCustomCallback(TIM_HandleTypeDef *htim)\r\n{\r\n  TIM_ConfTypeDef * pConf = G_TIM_Conf[0];\r\n  TIM_HandleTypeDef* pHandler = G_TIM_Handler[0];\r\n\r\n  {\r\n    uint16_t idx = 0;\r\n    for (idx = 0;idx < 5;idx++) {\r\n      pHandler = G_TIM_Handler[idx];\r\n      if (pHandler == htim) {\r\n        pConf = G_TIM_Conf[idx];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (pHandler == htim) {\r\n    if (pConf->ItUpFcn != NULL) {\r\n      /* Call update function for TIM9. */\r\n      pConf->ItUpFcn();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @brief  Period elapsed callback in non blocking mode\r\n * @param  htim TIM handle\r\n * @retval None\r\n */\r\nvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)\r\n{\r\n  extern void TIM_PeriodElapsedCustomCallback(TIM_HandleTypeDef *htim);\r\n\r\n  /* Handle this event from model side. */\r\n  TIM_PeriodElapsedCustomCallback(htim);\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : TIM9_ItUpFcn\r\n * Description    : TIM9 update interrupt\r\n * Input          : None\r\n * TIM9_ItUpFcn is called from TIM_PeriodElapsedCustomCallback function\r\n * in BanlanceCar_TIM.c file.\r\n *******************************************************************************/\r\nvoid TIM9_ItUpFcn()\r\n{\r\n  {\r\n    /* S-Function (TIMERS_Config): '<Root>/Timers' */\r\n\r\n    /* Output and update for function-call system: '<Root>/Function-Call Subsystem1' */\r\n    {\r\n      char_T string[31];\r\n      static const char_T b[26] = \"u1= %7.0f,u2= %7.1f r/s\\r\\n\";\r\n      real_T rtb_Switch_idx_0;\r\n      real_T rtb_Switch_idx_1;\r\n\r\n      /* S-Function (REG_Access): '<S1>/REG_Access2' */\r\n      {\r\n        BanlanceCar_B.REG_Access2 = TIM1->CNT;\r\n      }\r\n\r\n      /* Switch: '<S1>/Switch' incorporates:\r\n       *  Constant: '<S1>/Constant'\r\n       *  DataStoreWrite: '<S1>/Data Store Write'\r\n       *  Gain: '<S1>/Gain'\r\n       *  Gain: '<S1>/Gain1'\r\n       *  Sum: '<S1>/Add'\r\n       */\r\n      if (BanlanceCar_B.REG_Access2 > 10000.0) {\r\n        rtb_Switch_idx_0 = 65535.0 - BanlanceCar_B.REG_Access2;\r\n        rtb_Switch_idx_1 = (65535.0 - BanlanceCar_B.REG_Access2) *\r\n          0.0025641025641025641;\r\n      } else {\r\n        rtb_Switch_idx_0 = BanlanceCar_B.REG_Access2;\r\n        rtb_Switch_idx_1 = 0.0025641025641025641 * BanlanceCar_B.REG_Access2;\r\n      }\r\n\r\n      /* End of Switch: '<S1>/Switch' */\r\n\r\n      /* MATLAB Function: '<S1>/MATLAB Function' */\r\n      /* MATLAB Function 'Function-Call Subsystem1/MATLAB Function': '<S2>:1' */\r\n      /* '<S2>:1:2' if coder.target('Sfun') */\r\n      /* '<S2>:1:6' else */\r\n      /* '<S2>:1:7' Buff = uint32(0); */\r\n      /* '<S2>:1:8' string = char(zeros(1,31)); */\r\n      /* '<S2>:1:9' stringSize = uint16(size(string,2)); */\r\n      /* '<S2>:1:10' stringFormat = char(['u1= %7.0f,u2= %7.1f r/s',13,10,0]); */\r\n      /* '<S2>:1:11' coder.ceval('snprintf',coder.wref(string),stringSize,coder.rref(stringFormat),u1,u2); */\r\n      snprintf(&string[0], 31, &b[0], rtb_Switch_idx_0, rtb_Switch_idx_1);\r\n\r\n      /* '<S2>:1:12' Buff = coder.ceval('getBuffPtr',coder.rref(string)); */\r\n      BanlanceCar_B.Buff = getBuffPtr(&string[0]);\r\n\r\n      /* '<S2>:1:13' NbChar = stringSize; */\r\n      BanlanceCar_B.NbChar = 31U;\r\n\r\n      /* S-Function (USART_Send): '<S1>/USART_Send' */\r\n      {\r\n        if (BanlanceCar_B.NbChar != 0) {\r\n          /* Copy data to send. */\r\n          TX_CopyData(&USART1_TxConf, (uint8_t*)BanlanceCar_B.Buff, (uint16_t)\r\n                      BanlanceCar_B.NbChar);\r\n        }\r\n\r\n        if (USART1_TxConf.nb2Send) {\r\n          BanlanceCar_B.USART_Send = 0;\r\n          USART1_TX_SendData(&USART1_TxConf);\r\n        }\r\n\r\n        if (USART1_TxConf.txStatus != SERIAL_TX_ON) {\r\n          BanlanceCar_B.USART_Send = USART1_TxConf.nbSent;\r\n        }\r\n      }\r\n\r\n      /* S-Function (REG_Access): '<S1>/REG_Access' */\r\n      {\r\n        TIM1->CNT = 0;\r\n      }\r\n    }\r\n\r\n    /* End of Outputs for S-Function (TIMERS_Config): '<Root>/Timers' */\r\n  }\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_TIM.c\r\n */\r\n"},{"name":"BanlanceCar_TIM.h","type":"header","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: BanlanceCar_TIM.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_TIM_h_\r\n#define RTW_HEADER_BanlanceCar_TIM_h_\r\n#include \"STM32_Config.h\"\r\n\r\n/**\r\n * @brief TIM informations\r\n */\r\ntypedef struct {\r\n  uint32_t TIM_Prescaler;\r\n  uint32_t TIM_APBClock;\r\n  uint32_t TIM_ARR;\r\n  uint32_t TIM_Clock;\r\n  uint32_t TIM_Freq;\r\n  uint8_t CH1_type;\r\n  uint8_t CH2_type;\r\n  uint8_t CH3_type;\r\n  uint8_t CH4_type;\r\n  int32_t CH1_duty;\r\n  int32_t CH2_duty;\r\n  int32_t CH3_duty;\r\n  int32_t CH4_duty;\r\n\r\n  /* Input Capture data. */\r\n  uint32_t* ICCData;\r\n  uint32_t ICC1Capture;\r\n  uint32_t ICC1Freq;\r\n  uint32_t ICC1Duty;\r\n  uint32_t ICC2Capture;\r\n  uint32_t ICC2Freq;\r\n  uint32_t ICC2Duty;\r\n  uint32_t ICC3Capture;\r\n  uint32_t ICC3Freq;\r\n  uint32_t ICC3Duty;\r\n  uint32_t ICC4Capture;\r\n  uint32_t ICC4Freq;\r\n  uint32_t ICC4Duty;\r\n  uint16_t ICC1ReadValue1;\r\n  uint16_t ICC1ReadValue2;\r\n  uint16_t ICC1ReadValue3;\r\n  uint16_t ICC1ReadValue4;\r\n  uint16_t ICC2ReadValue1;\r\n  uint16_t ICC2ReadValue2;\r\n  uint16_t ICC2ReadValue3;\r\n  uint16_t ICC2ReadValue4;\r\n  uint16_t ICC3ReadValue1;\r\n  uint16_t ICC3ReadValue2;\r\n  uint16_t ICC3ReadValue3;\r\n  uint16_t ICC3ReadValue4;\r\n  uint16_t ICC4ReadValue1;\r\n  uint16_t ICC4ReadValue2;\r\n  uint16_t ICC4ReadValue3;\r\n  uint16_t ICC4ReadValue4;\r\n  uint8_t ICC1CaptureNumber;\r\n  uint8_t ICC2CaptureNumber;\r\n  uint8_t ICC3CaptureNumber;\r\n  uint8_t ICC4CaptureNumber;\r\n  void (* ItUpFcn)(void);\r\n  void (* ItTrgFcn)(void);\r\n  void (* ItComFcn)(void);\r\n  void (* ItBrkFcn)(void);\r\n  void (* ItCcFcn)(TIM_HandleTypeDef *htim);\r\n} TIM_ConfTypeDef;\r\n\r\ntypedef enum {\r\n  OUTPUT_COMP = 0,\r\n  OUTPUT_PWM,\r\n  OUTPUT_TRGO,\r\n  OUTPUT_FORCED,\r\n  INPUT_PWM,\r\n  INPUT_CAPTURE,\r\n  INPUT_ETR,\r\n  INPUT_ENCODER,\r\n  INPUT_HALL_SENSOR,\r\n  UNKNOWN\r\n} TIM_ChTypeDef;\r\n\r\n/* Number of configured TIMER. */\r\nextern uint16_t G_TIM_Count;\r\n\r\n/* Array of TIMER information. */\r\nextern TIM_ConfTypeDef* G_TIM_Conf[5];\r\nextern TIM_HandleTypeDef* G_TIM_Handler[5];\r\n\r\n/* TIM2 handler. */\r\nextern TIM_HandleTypeDef htim2;\r\n\r\n/* TIM2 informations. */\r\nextern TIM_ConfTypeDef TIM2_Conf;\r\n\r\n/* TIM9 handler. */\r\nextern TIM_HandleTypeDef htim9;\r\n\r\n/* TIM9 informations. */\r\nextern TIM_ConfTypeDef TIM9_Conf;\r\nextern void TIM9_ItUpFcn(void);\r\n\r\n#endif                                 /* RTW_HEADER_BanlanceCar_TIM_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_TIM.h\r\n */\r\n"},{"name":"BanlanceCar_USART.c","type":"source","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: BanlanceCar_USART.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"BanlanceCar.h\"\r\n#include \"BanlanceCar_USART.h\"\r\n#include \"main.h\"\r\n\r\n/* Number of USART/UART configured for send. */\r\nuint16_t G_SERIAL_TX_Count = 0;\r\n\r\n/* Array of USART/UART send data information. */\r\nSERIAL_TxConfTypeDef* G_SERIAL_TX_Conf[2];\r\nvoid* G_SERIAL_TX_Handler[2];\r\n\r\n/* USART1 ring data send buffer. */\r\nstatic uint8_t USART1_TxDataBuffer[512];\r\n\r\n/* USART1 send data structure information. */\r\nSERIAL_TxConfTypeDef USART1_TxConf;\r\n\r\n/*******************************************************************************\r\n * Function Name  : TX_CopyData\r\n * Description    : Copy msg to send to ring buffer (if possible)\r\n * Input          : pointer to data to send , length(number) of data to send and\r\n *                  ring buffer context\r\n *******************************************************************************/\r\nvoid TX_CopyData(struct SERIAL_TxConf* pConf, uint8_t* pSrc, uint16_t dataLength)\r\n{\r\n  uint16_t msgSize = 0;\r\n  uint16_t idx;\r\n\r\n  /* Copy msg to send to ring buffer */\r\n  for (idx = 0; idx < dataLength; idx++) {\r\n    if ((pConf->pTx_W == pConf->pTx_R) && (pConf->nb2Send!=0))\r\n      break;                           /* Ring Buffer is full. */\r\n    *pConf->pTx_W++ = *pSrc++;\r\n    msgSize++;\r\n    if (pConf->pTx_W == pConf->pTx_R)\r\n      break;                           /* Ring Buffer is full. */\r\n    if (pConf->pTx_W == pConf->pTx_BuffEnd) {\r\n      /* Revolve buffer. */\r\n      pConf->pTx_W = pConf->pTx_BuffStart;\r\n    }\r\n  }\r\n\r\n  /* Update number of data to send. */\r\n  /* Access locked. */\r\n  pConf->txLock = 1;\r\n  pConf->nb2Send += msgSize;\r\n\r\n  /* If end of send interrupt mode arrived during last instruction. */\r\n  if (pConf->txLock == 2)\r\n    pConf->nb2Send -= pConf->nbSent;\r\n\r\n  /* Unlock access. */\r\n  pConf->txLock = 0;\r\n  if (msgSize < dataLength)\r\n    pConf->nbMsgLost++;                /* Message not all sent. */\r\n}\r\n\r\n/**\r\n * @brief Tx Transfer completed callback.\r\n * @param huart UART handle.\r\n * @retval None\r\n */\r\nvoid HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)\r\n{\r\n  SERIAL_TxConfTypeDef* pConf = G_SERIAL_TX_Conf[0];\r\n  UART_HandleTypeDef* pHandler = (UART_HandleTypeDef*)G_SERIAL_TX_Handler[0];\r\n\r\n  {\r\n    uint16_t idx = 0;\r\n    for (idx = 0;idx < 2;idx++) {\r\n      pHandler = (UART_HandleTypeDef*)G_SERIAL_TX_Handler[idx];\r\n      if (pHandler == huart) {\r\n        pConf = G_SERIAL_TX_Conf[idx];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (pHandler == huart) {\r\n    pConf->txStatus = SERIAL_TX_OK;\r\n    pConf->pTx_R += pConf->nbSent;\r\n    if (pConf->pTx_R >= pConf->pTx_BuffEnd) {\r\n      pConf->pTx_R = pConf->pTx_BuffStart;\r\n    }\r\n\r\n    if (pConf->txLock == 0) {\r\n      pConf->nb2Send -= pConf->nbSent;\r\n    } else {\r\n      pConf->txLock = 2;\r\n    }\r\n  }\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : USART1_TX_SendData\r\n * Description    : Send ring buffer management\r\n * Input          : Ring buffer context\r\n *******************************************************************************/\r\nvoid USART1_TX_SendData(struct SERIAL_TxConf* pConf)\r\n{\r\n  uint16_t msgSize;\r\n\r\n  /* If USART is not already running and data to send */\r\n  if ((pConf->txStatus != SERIAL_TX_ON) && pConf->nb2Send) {\r\n    pConf->txStatus = SERIAL_TX_ON;\r\n    msgSize = (uint32_t)pConf->pTx_BuffEnd - (uint32_t)pConf->pTx_R;\r\n\r\n    /* Send all msg or end of ring buffer */\r\n    if (pConf->nb2Send <= msgSize) {\r\n      pConf->nbSent = pConf->nb2Send;\r\n\r\n      /* USART1 interrupt send mode*/\r\n      HAL_UART_Transmit_IT(&huart1, pConf->pTx_R, pConf->nb2Send);\r\n    } else {\r\n      pConf->nbSent = msgSize;\r\n\r\n      /* USART1 interrupt send mode*/\r\n      HAL_UART_Transmit_IT(&huart1, pConf->pTx_R, msgSize);\r\n    }\r\n  }\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : USART1_Tx_Initialization\r\n * Description    : Send Initialization of USART1\r\n * Input          : -\r\n *******************************************************************************/\r\nvoid USART1_Tx_Initialization(void)\r\n{\r\n  /* Store USART1 send configuration and its handler. */\r\n\r\n  /* Initialize ring buffer information. */\r\n  USART1_TxConf.nb2Send = 0;\r\n  USART1_TxConf.nbSent = 0;\r\n  USART1_TxConf.nbMsgLost = 0;\r\n  USART1_TxConf.buffSize = 512;\r\n  USART1_TxConf.pTx_BuffStart = &USART1_TxDataBuffer[0];\r\n  USART1_TxConf.pTx_BuffEnd = &USART1_TxDataBuffer[512];\r\n  USART1_TxConf.pTx_W = USART1_TxDataBuffer;\r\n  USART1_TxConf.pTx_R = USART1_TxDataBuffer;\r\n  USART1_TxConf.CopyData = TX_CopyData;\r\n  USART1_TxConf.SendData = USART1_TX_SendData;\r\n  USART1_TxConf.txStatus = SERIAL_TX_OFF;\r\n  USART1_TxConf.txLock = 0;\r\n\r\n  /* Register this USART1 in global configuration stores. */\r\n  G_SERIAL_TX_Conf[G_SERIAL_TX_Count] = &USART1_TxConf;\r\n  G_SERIAL_TX_Handler[G_SERIAL_TX_Count] = (void*)&huart1;\r\n  G_SERIAL_TX_Count++;\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_USART.c\r\n */\r\n"},{"name":"BanlanceCar_USART.h","type":"header","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: BanlanceCar_USART.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_BanlanceCar_USART_h_\r\n#define RTW_HEADER_BanlanceCar_USART_h_\r\n#include \"STM32_Config.h\"\r\n\r\n/* USART1_Tx_Initialization declaration. */\r\nvoid USART1_Tx_Initialization(void);\r\n\r\n/**\r\n * @brief USART Tx State structures definition\r\n */\r\ntypedef enum {\r\n  SERIAL_TX_ON = 0x00,                 /*!< Tx serial communication started. */\r\n  SERIAL_TX_OK = 0x01,               /*!< Tx serial communication terminated. */\r\n  SERIAL_TX_OFF = 0x02                 /*!< Tx serial communication stopped. */\r\n} SERIAL_TxStatusTypeDef;\r\n\r\n/**\r\n * @brief SERIAL data information\r\n */\r\ntypedef struct SERIAL_TxConf {\r\n  uint16_t nb2Send;                    /*!< Nb of char to send*/\r\n  uint16_t nbSent;                     /*!< Nb sent char*/\r\n  uint16_t nbMsgLost;       /*!< Nb lost msg (not enough space in ring buffer)*/\r\n  uint16_t buffSize;                   /*!< Size of send ring buffer*/\r\n  uint8_t* pTx_BuffStart;              /*!< point to ring buffer*/\r\n  uint8_t* pTx_BuffEnd;                /*!< point to end ring buffer*/\r\n  uint8_t* pTx_W;                      /*!< point to free space*/\r\n  uint8_t* pTx_R;                      /*!< point to char to send*/\r\n  void (* CopyData)(struct SERIAL_TxConf* pConf, uint8_t* pSrc, uint16_t\r\n                    dataLength);\r\n  void (* SendData)(struct SERIAL_TxConf* pConf);\r\n  __IO SERIAL_TxStatusTypeDef txStatus;/*!< Usart send communication status.*/\r\n  __IO uint8_t txLock;                 /*!< lock data access */\r\n} SERIAL_TxConfTypeDef;\r\n\r\n/* USART1 HAL handler. */\r\nextern UART_HandleTypeDef huart1;\r\n\r\n/* USART1 send configuration. */\r\nextern SERIAL_TxConfTypeDef USART1_TxConf;\r\nvoid TX_CopyData(struct SERIAL_TxConf*, uint8_t*, uint16_t);\r\n\r\n/* USART1_TX_SendData declaration. */\r\nvoid USART1_TX_SendData(struct SERIAL_TxConf*);\r\n\r\n#endif                                 /* RTW_HEADER_BanlanceCar_USART_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] BanlanceCar_USART.h\r\n */\r\n"},{"name":"STM32_Config.h","type":"header","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: STM32_Config.h\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_STM32_Config_h_\r\n#define RTW_HEADER_STM32_Config_h_\r\n#include \"stm32f4xx.h\"\r\n#include \"stm32f4xx_hal.h\"\r\n\r\n/* For Error_Handler() declaration. */\r\n#include \"main.h\"\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* RTW_HEADER_STM32_Config_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] STM32_Config.h\r\n */\r\n"},{"name":"main.c","type":"source","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: main.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/* This section of code is going to be merged by the STM32CubeMX tool. */\r\n/* USER CODE BEGIN 0 */\r\n#include <stdio.h>\r\n#include \"BanlanceCar.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Flags for taskOverrun */\r\nstatic boolean_T OverrunFlags[1] = { false, };\r\n\r\n/* Number of auto reload timer rotation computed */\r\nstatic volatile uint32_t autoReloadTimerLoopVal_S = 1;\r\n\r\n/* Remaining number of auto reload timer rotation to do */\r\nvolatile uint32_t remainAutoReloadTimerLoopVal_S = 1;\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n * @brief  The application entry point.\r\n * @retval int\r\n */\r\nint main (void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 1 */\r\n  /* USER CODE END 1 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 2 */\r\n  /* Use Systick arm timer and interrupt to tick step() functions of the Simulink model. */\r\n  /* Fundamental sample time is set to: '0.001' s */\r\n  if (SysTick_Config((uint32_t)(SystemCoreClock/1000.0))) {\r\n    autoReloadTimerLoopVal_S = 1;\r\n    do {\r\n      autoReloadTimerLoopVal_S++;\r\n    } while ((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S >\r\n             SysTick_LOAD_RELOAD_Msk);\r\n\r\n    SysTick_Config((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S);\r\n  }\r\n\r\n  /* Set number of loop to do. */\r\n  remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n  {\r\n    int i;\r\n    for (i = 0; i < 1; i++) {\r\n      OverrunFlags[i] = false;\r\n    }\r\n  }\r\n\r\n  /* Initialize model */\r\n  BanlanceCar_initialize();\r\n\r\n  /* USER CODE END 2 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN WHILE */\r\n  /* Infinite loop */\r\n  /* Real time from systickHandler */\r\n  while (1) {\r\n    /*Process tasks every solver time*/\r\n    if (remainAutoReloadTimerLoopVal_S == 0) {\r\n      remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n      /* Check base rate for overrun */\r\n      if (OverrunFlags[0]) {\r\n        rtmSetErrorStatus(BanlanceCar_M, \"Overrun\");\r\n      }\r\n\r\n      OverrunFlags[0] = true;\r\n\r\n      /* Step the model for base rate */\r\n      BanlanceCar_step();\r\n\r\n      /* Get model outputs here */\r\n\r\n      /* Indicate task for base rate complete */\r\n      OverrunFlags[0] = false;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END WHILE */\r\n\r\n  /* USER CODE BEGIN 3 */\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] main.c\r\n */\r\n"},{"name":"stm32xxxx_it.c","type":"source","group":"","path":"D:\\Simulink_stm32f4\\STM32F407VET6\\BalanceCar\\BanlanceCar_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * File: stm32xxxx_it.c\r\n *\r\n * Code generated for Simulink model :BanlanceCar.\r\n *\r\n * Model version      : 1.14\r\n * Simulink Coder version    : 9.6 (R2021b) 14-May-2021\r\n * TLC version       : 9.6 (Aug 25 2021)\r\n * C/C++ source code generated on  : Mon Dec 20 20:05:54 2021\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/**\r\n * @brief This function handles System tick timer.\r\n */\r\nvoid SysTick_Handler(void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN SysTick_IRQn 0 */\r\n  {\r\n    extern volatile uint32_t remainAutoReloadTimerLoopVal_S;\r\n\r\n    /* Manage number of loop before interrupt has to be processed. */\r\n    if (remainAutoReloadTimerLoopVal_S) {\r\n      remainAutoReloadTimerLoopVal_S--;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END SysTick_IRQn 0 */\r\n\r\n  /* USER CODE BEGIN SysTick_IRQn 1 */\r\n\r\n  /* USER CODE END SysTick_IRQn 1 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] stm32xxxx_it.c\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};